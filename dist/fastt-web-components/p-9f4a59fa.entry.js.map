{"version":3,"names":["chatModalCss","ChatModal","open","modalTitle","titleStyle","messages","isLoading","iconSize","apiEndpoint","conversationId","componentWillLoad","this","loadFonts","existingLink","document","querySelector","link","createElement","rel","href","head","appendChild","closeModal","handleChunk","async","message","aiMessageIndex","length","callAIStream","chunk","map","msg","index","content","isComplete","error","console","handleSubmit","e","preventDefault","form","target","input","value","push","role","reset","render","h","Host","key","class","visible","onClick","Fragment","onSubmit","name","type","placeholder","disabled","xmlns","width","height","viewBox","fill","stroke","d","chatSkeletonCss","ChatSkeleton","chatWidgetCss","ChatWidget","isChatContainerVisible","inputEl","trim","userMessage","newMessages","toggleChatContainer","setInputRef","el","hide","required","ref","x1","y1","x2","y2","points","satisfactionButtonsCss","SatisfactionButtons"],"sources":["src/components/chat-modal/chat-modal.css?tag=chat-modal&encapsulation=shadow","src/components/chat-modal/chat-modal.tsx","src/components/chat-skeleton/chat-skeleton.css?tag=chat-skeleton&encapsulation=shadow","src/components/chat-skeleton/chat-skeleton.tsx","src/components/chat-widget/chat-widget.css?tag=chat-widget&encapsulation=shadow","src/components/chat-widget/chat-widget.tsx","src/components/satisfaction-buttons/satisfaction-buttons.css?tag=satisfaction-buttons&encapsulation=shadow","src/components/satisfaction-buttons/satisfaction-buttons.tsx"],"sourcesContent":[":host {\n  font-family: 'Yantramanav', serif, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n  --main-color: #ff8834;\n}\n\np {\n  all: unset;\n}\n\nbutton {\n  font-family: 'Signika', serif, Arial, sans-serif;\n}\n\ninput {\n  font-family: 'Yantramanav', serif, Arial, sans-serif;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.3s ease, visibility 0.3s ease;\n}\n\n.modal-overlay.visible {\n  opacity: 1;\n  visibility: visible;\n}\n\n.chat-container {\n  width: 90vw;\n  height: 90vh;\n  max-width: 1200px;\n  max-height: 800px;\n  background: white;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n  position: relative;\n  transform: scale(0.8);\n  transition: transform 0.3s ease;\n}\n\n.modal-overlay.visible .chat-container {\n  transform: scale(1);\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 30px;\n  border-bottom: 1px solid #eee;\n  background: linear-gradient(135deg, var(--main-color), #ff8834);\n  color: white;\n  border-radius: 12px 12px 0 0;\n}\n\n.modal-title {\n  font-family: 'Signika', Arial, sans-serif;\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin: 0;\n}\n\n.close-button {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 1.5rem;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s ease;\n}\n\n.close-button:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n.chat-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 30px;\n  min-height: 0;\n}\n\n.message-container {\n  flex: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 20px;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  min-height: 300px;\n}\n\n.message {\n  margin: 12px 0;\n  padding: 12px 16px;\n  border-radius: 12px;\n  max-width: 80%;\n  word-wrap: break-word;\n  line-height: 1.4;\n}\n\n.user-message {\n  background: linear-gradient(135deg, var(--main-color), #ff8834);\n  color: white;\n  margin-left: auto;\n  width: fit-content;\n  border-radius: 20px 20px 0px 20px;\n}\n\n.ai-message {\n  background: hsla(240, 6%, 90%, 0.5);\n  color: #333;\n  margin-right: auto;\n  width: fit-content;\n  border-radius: 20px 20px 20px 0px;\n}\n\n.input-container {\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  background: white;\n  padding: 16px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\ninput {\n  flex: 1;\n  padding: 12px 16px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  font-size: 1rem;\n  outline: none;\n  transition: border-color 0.2s ease;\n}\n\ninput:focus {\n  border-color: var(--main-color);\n  box-shadow: 0 0 0 2px rgba(236, 102, 7, 0.1);\n}\n\nbutton {\n  padding: 12px 24px;\n  background: linear-gradient(135deg, var(--main-color), #ff8834);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 600;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\nbutton:hover:not(:disabled) {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(236, 102, 7, 0.3);\n}\n\nbutton:disabled {\n  background: #cccccc;\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: none;\n}\n\n.typing-indicator {\n  display: none;\n  margin: 12px 0;\n  max-width: 80%;\n  margin-right: auto;\n}\n\n.typing-indicator.active {\n  display: block;\n}\n\n/* Skeleton integration styles */\n.typing-indicator .skeleton-container {\n  margin: 0;\n  background: transparent;\n  border: none;\n  padding: 12px 16px;\n}\n\n.typing-indicator .skeleton-wrapper {\n  gap: 8px;\n}\n\n.typing-indicator .skeleton-avatar {\n  width: 24px;\n  height: 24px;\n  margin-bottom: 0;\n}\n\n.typing-indicator .skeleton-line {\n  height: 12px;\n}\n\n.typing-indicator .skeleton-typing {\n  margin-top: 4px;\n}\n\n/* Scrollbar styling */\n.message-container::-webkit-scrollbar {\n  width: 8px;\n}\n\n.message-container::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.message-container::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.message-container::-webkit-scrollbar-thumb:hover {\n  background: #a1a1a1;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .chat-container {\n    width: 95vw;\n    height: 95vh;\n    border-radius: 8px;\n  }\n\n  .modal-header {\n    padding: 15px 20px;\n  }\n\n  .modal-title {\n    font-size: 1.25rem;\n  }\n\n  .chat-content {\n    padding: 20px;\n  }\n\n  .message {\n    max-width: 90%;\n    padding: 10px 12px;\n  }\n\n  .input-container {\n    padding: 12px;\n    gap: 8px;\n  }\n\n  input {\n    padding: 10px 12px;\n  }\n\n  button {\n    padding: 10px 16px;\n  }\n}\n\n.ai-feedback-buttons {\n  display: flex;\n  gap: 8px;\n  margin-top: 8px;\n  align-items: center;\n}\n\n.ai-feedback-buttons button {\n  all: unset;\n  cursor: pointer;\n}\n\n.ai-feedback-buttons button:hover {\n  all: unset;\n  cursor: pointer;\n}\n\n.thumb-up,\n.thumb-down {\n  width: 16px;\n  height: 16px;\n}\n\n/* Skeleton */\n\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n.skeleton-container {\n  position: relative;\n}\n\n.skeleton-line {\n  height: 14px;\n  background: linear-gradient(90deg, #e9ecef 25%, #f8f9fa 50%, #e9ecef 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite linear;\n  border-radius: 4px;\n  margin-bottom: 8px;\n  position: relative;\n  overflow: hidden;\n}\n\n.skeleton-line:last-child {\n  margin-bottom: 0;\n}\n\n.skeleton-line.line-1 {\n  width: 95%;\n}\n\n.skeleton-line.line-2 {\n  width: 88%;\n}\n\n.skeleton-line.line-3 {\n  width: 72%;\n}\n\n.skeleton-avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  background: linear-gradient(90deg, #e9ecef 25%, #f8f9fa 50%, #e9ecef 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite linear;\n  margin-bottom: 12px;\n  display: inline-block;\n}\n\n.skeleton-wrapper {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n}\n\n.skeleton-content {\n  flex: 1;\n}\n\n.skeleton-typing {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin-top: 8px;\n}\n\n.skeleton-dot {\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  background-color: #6c757d;\n  animation: typing 1.4s infinite ease-in-out;\n}\n\n.skeleton-dot:nth-child(1) {\n  animation-delay: -0.32s;\n}\n.skeleton-dot:nth-child(2) {\n  animation-delay: -0.16s;\n}\n.skeleton-dot:nth-child(3) {\n  animation-delay: 0s;\n}\n\n@keyframes typing {\n  0%,\n  80%,\n  100% {\n    opacity: 0.3;\n    transform: scale(0.8);\n  }\n  40% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.skeleton-glow {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n  animation: glow 2s infinite;\n  border-radius: inherit;\n}\n\n@keyframes glow {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n","import { Component, Host, h, State, Prop } from '@stencil/core';\nimport { TitleStyle } from './types';\nimport { callAIStream } from '../../utils/utils';\n\n@Component({\n  tag: 'chat-modal',\n  styleUrl: 'chat-modal.css',\n  shadow: true,\n})\nexport class ChatModal {\n  @State() open = true;\n  @Prop() modalTitle: string = \"Que puis-je faire pour vous ?\";\n  @Prop() titleStyle: Partial<TitleStyle> = {};\n  @State() messages: { role: string; content: string; isComplete?: boolean }[] = [];\n  @State() isLoading: boolean = false;\n  @Prop() iconSize: number = 16;\n  @Prop() apiEndpoint: string = 'http://localhost:8000';\n  @State() conversationId: string = '';\n\n  componentWillLoad() {\n    this.loadFonts();\n  }\n\n  private loadFonts() {\n    // Check if fonts are already loaded to avoid duplicates\n    const existingLink = document.querySelector('link[href*=\"fonts.googleapis.com/css2?family=Signika\"]');\n    if (!existingLink) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = 'https://fonts.googleapis.com/css2?family=Signika:wght@300..700&family=Yantramanav:wght@100;300;400;500;700;900&display=swap';\n      document.head.appendChild(link);\n    }\n  }\n\n  private closeModal = () => {\n    this.open = false;\n  };\n\n  private handleChunk = async (message: string) => {\n    try {\n      const aiMessageIndex = this.messages.length - 1; // The AI message we just added\n\n      await callAIStream(\n        message,\n        this.apiEndpoint,\n        this.conversationId || '',\n        (chunk: string) => {\n          this.messages = this.messages.map((msg, index) =>\n            index === aiMessageIndex\n              ? { ...msg, content: msg.content + chunk }\n              : msg\n          );\n        },\n        () => {\n          this.messages = this.messages.map((msg, index) =>\n            index === aiMessageIndex\n              ? { ...msg, isComplete: true }\n              : msg\n          );\n          this.isLoading = false;\n        },\n        (error: Error) => {\n          console.error('AI stream error:', error);\n          this.messages = this.messages.map((msg, index) =>\n            index === aiMessageIndex\n              ? { ...msg, content: 'Sorry, I encountered an error. Please try again.', isComplete: true }\n              : msg\n          );\n          this.isLoading = false;\n        }\n      );\n    } catch (error) {\n      console.error('Failed to call AI stream:', error);\n      const aiMessageIndex = this.messages.length - 1;\n      this.messages = this.messages.map((msg, index) =>\n        index === aiMessageIndex\n          ? { ...msg, content: 'Sorry, I encountered an error. Please try again.', isComplete: true }\n          : msg\n      );\n      this.isLoading = false;\n    }\n  };\n\n  private handleSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const input = form.querySelector('input[name=\"message\"]') as HTMLInputElement;\n    const message = input.value;\n    this.messages.push({ role: 'user', content: message });\n    this.isLoading = true;\n    form.reset();\n    this.messages.push({ role: 'ai', content: '' });\n    await this.handleChunk(message);\n  };\n\n  render() {\n    return (\n      <Host>\n        <div class={{ 'modal-overlay': true, visible: this.open }}>\n          <div class=\"chat-container\">\n            <div class=\"modal-header\">\n              <span class=\"modal-title\">{this.modalTitle}</span>\n              <button class=\"close-button\" onClick={this.closeModal} aria-label=\"Close\">&times;</button>\n            </div>\n            <div class=\"chat-content\">\n              <div class=\"message-container\">\n                {this.messages.map((message, index) => (\n                  <div\n                    key={index}\n                    class={{\n                      'message': true,\n                      'user-message': message.role === 'user',\n                      'ai-message': message.role === 'ai',\n                    }}\n                  >\n                    {message.role === 'ai' ? (\n                      <>\n                        {this.isLoading && message.content === '' ? (\n                          <chat-skeleton />\n                        ) : message.content}\n                        {message.isComplete && <satisfaction-buttons />}\n                      </>\n                    ) : (\n                      <p>{message.content}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n              <form class=\"input-container\" onSubmit={this.handleSubmit}>\n                <input\n                  name='message'\n                  type='text'\n                  placeholder='Tapez votre message ici...'\n                  disabled={this.isLoading}\n                />\n                <button\n                  type='submit'\n                  disabled={this.isLoading}\n                  class=\"send-button\"\n                >\n                  {this.isLoading ? 'Envoi...' : <svg xmlns=\"http://www.w3.org/2000/svg\" width={this.iconSize} height={this.iconSize} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-send-horizontal-icon lucide-send-horizontal\"><path d=\"M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z\" /><path d=\"M6 12h16\" /></svg>}\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n.skeleton-container {\n  position: relative;\n}\n\n.skeleton-line {\n  height: 14px;\n  background: linear-gradient(90deg, #e9ecef 25%, #f8f9fa 50%, #e9ecef 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite linear;\n  border-radius: 4px;\n  margin-bottom: 8px;\n  position: relative;\n  overflow: hidden;\n}\n\n.skeleton-line:last-child {\n  margin-bottom: 0;\n}\n\n.skeleton-line.line-1 {\n  width: 95%;\n}\n\n.skeleton-line.line-2 {\n  width: 88%;\n}\n\n.skeleton-line.line-3 {\n  width: 72%;\n}\n\n.skeleton-avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  background: linear-gradient(90deg, #e9ecef 25%, #f8f9fa 50%, #e9ecef 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite linear;\n  margin-bottom: 12px;\n  display: inline-block;\n}\n\n.skeleton-wrapper {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n}\n\n.skeleton-content {\n  flex: 1;\n}\n\n.skeleton-typing {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin-top: 8px;\n}\n\n.skeleton-dot {\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  background-color: #6c757d;\n  animation: typing 1.4s infinite ease-in-out;\n}\n\n.skeleton-dot:nth-child(1) {\n  animation-delay: -0.32s;\n}\n.skeleton-dot:nth-child(2) {\n  animation-delay: -0.16s;\n}\n.skeleton-dot:nth-child(3) {\n  animation-delay: 0s;\n}\n\n@keyframes typing {\n  0%,\n  80%,\n  100% {\n    opacity: 0.3;\n    transform: scale(0.8);\n  }\n  40% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.skeleton-glow {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n  animation: glow 2s infinite;\n  border-radius: inherit;\n}\n\n@keyframes glow {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n","import { Component, Host, h } from '@stencil/core';\n\n@Component({\n  tag: 'chat-skeleton',\n  styleUrl: 'chat-skeleton.css',\n  shadow: true,\n})\nexport class ChatSkeleton {\n  render() {\n    return (\n      <Host>\n        <div class='skeleton-container'>\n          <div class='skeleton-typing'>\n            <div class='skeleton-dot'></div>\n            <div class='skeleton-dot'></div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  --main-color: #ff8834;\n  font-family: 'Yantramanav', serif, Arial, sans-serif;\n}\n\n.chat-widget-container {\n  position: fixed;\n  bottom: 24px;\n  right: 24px;\n  width: 350px;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.15);\n  z-index: 999;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n.chat-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 16px;\n  border-bottom: 1px solid #eee;\n  background: var(--main-color);\n  color: white;\n  font-family: 'Signika', Arial, sans-serif;\n}\n.chat-title {\n  margin: 0;\n  font-size: 1.1rem;\n  font-weight: 600;\n}\n.close-button {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 1.5rem;\n  cursor: pointer;\n}\n.message-container {\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  background: #f7fafc;\n  min-height: 200px;\n}\n.message {\n  margin-bottom: 12px;\n  padding: 10px 14px;\n  border-radius: 8px;\n  max-width: 80%;\n  word-break: break-word;\n}\n.user-message {\n  background: #bee3f8;\n  align-self: flex-end;\n  text-align: right;\n}\n.ai-message {\n  background: #e2e8f0;\n  align-self: flex-start;\n  text-align: left;\n}\n.typing-indicator {\n  min-height: 24px;\n  padding: 0 16px;\n  color: #888;\n  font-size: 0.9rem;\n}\n.input-container {\n  display: flex;\n  border-top: 1px solid #eee;\n  padding: 8px;\n  background: #fff;\n}\n.input {\n  flex: 1;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n  padding: 8px;\n  font-size: 1rem;\n  margin-right: 8px;\n  font-family: 'Yantramanav', serif, Arial, sans-serif;\n}\n.send-button {\n  background: var(--main-color);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 0 16px;\n  font-size: 1rem;\n  cursor: pointer;\n}\n.send-icon {\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n}\n.chat-toggler {\n  position: fixed;\n  bottom: 24px;\n  right: 24px;\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background: #3182ce;\n  color: white;\n  border: none;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  cursor: pointer;\n  z-index: 999;\n}\n.hide {\n  display: none;\n  opacity: 0;\n  z-index: -1;\n  transform: translateY(50%);\n}\n","import { Component, h, Prop, State } from '@stencil/core';\nimport { callAIStream } from '../../utils/utils';\n\n@Component({\n  tag: 'chat-widget',\n  styleUrl: 'chat-widget.css',\n  shadow: true,\n})\nexport class ChatWidget {\n  @State() messages: { role: string; content: string; isComplete?: boolean }[] = [];\n  @State() isLoading: boolean = false;\n  @State() isChatContainerVisible: boolean = true;\n  @Prop() apiEndpoint: string = \"http://localhost:8000\";\n\n  private inputEl?: HTMLInputElement;\n\n  componentWillLoad() {\n    this.loadFonts();\n  }\n\n  private loadFonts() {\n    // Check if fonts are already loaded to avoid duplicates\n    const existingLink = document.querySelector('link[href*=\"fonts.googleapis.com/css2?family=Signika\"]');\n    if (!existingLink) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = 'https://fonts.googleapis.com/css2?family=Signika:wght@300..700&family=Yantramanav:wght@100;300;400;500;700;900&display=swap';\n      document.head.appendChild(link);\n    }\n  }\n\n  private handleSubmit = async (e: Event) => {\n    e.preventDefault();\n    const input = this.inputEl;\n    if (!input || !input.value.trim()) return;\n    const message = input.value;\n    const userMessage = { role: 'user', content: message, isComplete: true };\n    this.messages = [...this.messages, userMessage];\n    input.value = '';\n    this.isLoading = true;\n    const aiMessageIndex = this.messages.length;\n    this.messages = [...this.messages, { role: 'ai', content: '', isComplete: false }];\n    try {\n      await callAIStream(\n        message,\n        this.apiEndpoint,\n        'default',\n        (chunk: string) => {\n          const newMessages = [...this.messages];\n          newMessages[aiMessageIndex].content += chunk;\n          this.messages = newMessages;\n        },\n        () => {\n          this.isLoading = false;\n          const newMessages = [...this.messages];\n          newMessages[aiMessageIndex].isComplete = true;\n          this.messages = newMessages;\n        },\n        () => {\n          const newMessages = [...this.messages];\n          newMessages[aiMessageIndex] = {\n            ...newMessages[aiMessageIndex],\n            content: 'Sorry, I encountered an error. Please try again.',\n            isComplete: true,\n          };\n          this.messages = newMessages;\n          this.isLoading = false;\n        }\n      );\n    } catch (error) {\n      const newMessages = [...this.messages];\n      newMessages[aiMessageIndex] = {\n        ...newMessages[aiMessageIndex],\n        content: 'Sorry, I encountered an error. Please try again.',\n        isComplete: true,\n      };\n      this.messages = newMessages;\n      this.isLoading = false;\n    }\n  };\n\n  private toggleChatContainer = () => {\n    this.isChatContainerVisible = !this.isChatContainerVisible;\n  };\n\n  private setInputRef = (el: HTMLInputElement) => {\n    this.inputEl = el;\n  };\n\n  render() {\n    return [\n      <div\n        class={{\n          'chat-widget-container': true,\n          'hide': !this.isChatContainerVisible,\n        }}\n      >\n        <div class=\"chat-header\">\n          <h3 class=\"chat-title\">Que puis-je faire pour vous ?</h3>\n          <button class=\"close-button\" onClick={this.toggleChatContainer}>×</button>\n        </div>\n        <div class=\"message-container\">\n          {this.messages.map((message, index) => (\n            <div\n              key={index}\n              class={{\n                'message': true,\n                'user-message': message.role === 'user',\n                'ai-message': message.role === 'ai',\n              }}\n            >\n              {message.role === 'ai' ? [\n                this.isLoading && message.content === '' ? <chat-skeleton /> : <span>{message.content}</span>,\n                message.isComplete && <satisfaction-buttons />,\n              ] : <span>{message.content}</span>}\n            </div>\n          ))}\n        </div>\n        <div class=\"typing-indicator\">\n          {this.isLoading ? 'AI is typing...' : ''}\n        </div>\n        <form class=\"input-container\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            name=\"message\"\n            required\n            class=\"input\"\n            ref={this.setInputRef}\n          />\n          <button type=\"submit\" disabled={this.isLoading} class=\"send-button\">\n            {this.isLoading ? 'Envoi...' : (\n              <svg class=\"send-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>\n            )}\n          </button>\n        </form>\n      </div>,\n      <button\n        class=\"chat-toggler\"\n        onClick={this.toggleChatContainer}\n      >\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          width='24'\n          height='24'\n          viewBox='0 0 24 24'\n          fill='none'\n          stroke='white'\n          stroke-width='2'\n          stroke-linecap='round'\n          stroke-linejoin='round'\n        >\n          <path d='M7.9 20A9 9 0 1 0 4 16.1L2 22Z' />\n        </svg>\n      </button>\n    ];\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Host, h } from '@stencil/core';\n\n@Component({\n  tag: 'satisfaction-buttons',\n  styleUrl: 'satisfaction-buttons.css',\n  shadow: true,\n})\nexport class SatisfactionButtons {\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}