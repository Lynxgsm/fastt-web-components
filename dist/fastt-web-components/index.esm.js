async function e(e,r,t,o,n,c){try{const s=await fetch(`${r}/stream-chat`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"text/event-stream","Cache-Control":"no-cache"},body:JSON.stringify({message:e,conversation_id:t})});if(!s.ok){throw new Error(`API request failed: ${s.status} ${s.statusText}`)}const a=s.body?.getReader();const i=new TextDecoder;let f="";if(!a){throw new Error("Failed to get response reader")}while(true){const{done:e,value:r}=await a.read();if(e){f+=i.decode();const e=f.split("\n");for(const r of e){if(r.startsWith("data: ")){const e=r.slice(6);try{const r=JSON.parse(e);if(r.type==="end"&&r.status==="completed"){n?.();return}else if(r.type==="error"){c?.(new Error(r.error||"Unknown error"));return}else if(r.content){o(r.content)}else if(r.message){o(r.message)}else if(r.text){o(r.text)}}catch(r){if(e.trim()){o(e)}}}}n?.();break}f+=i.decode(r,{stream:true});let t=f.split("\n");f=t.pop()||"";for(const e of t){if(e.startsWith("data: ")){const r=e.slice(6);try{const e=JSON.parse(r);if(e.type==="end"&&e.status==="completed"){n?.();return}else if(e.type==="error"){c?.(new Error(e.error||"Unknown error"));return}else if(e.content){o(e.content)}else if(e.message){o(e.message)}else if(e.text){o(e.text)}}catch(e){if(r.trim()){o(r)}}}}}}catch(e){c?.(e)}}export{e as callAIStream};
//# sourceMappingURL=index.esm.js.map