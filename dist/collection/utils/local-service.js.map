{"version":3,"file":"local-service.js","sourceRoot":"","sources":["../../src/utils/local-service.ts"],"names":[],"mappings":"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","sourcesContent":["export async function callAIStream(\n  message: string,\n  apiEndpoint: string,\n  conversationId: string,\n  onChunk: (chunk: string) => void,\n  onComplete?: () => void,\n  onError?: (error: Error) => void,\n): Promise<void> {\n  try {\n    const response = await fetch(`${apiEndpoint}/stream-chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n      },\n      body: JSON.stringify({\n        message: message,\n        conversation_id: conversationId,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n\n    const reader = response.body?.getReader();\n    const decoder = new TextDecoder();\n    let partial = '';\n\n    if (!reader) {\n      throw new Error('Failed to get response reader');\n    }\n\n    while (true) {\n      const { done, value } = await reader.read();\n\n      if (done) {\n        partial += decoder.decode();\n\n        const lines = partial.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            try {\n              const parsed = JSON.parse(data);\n\n              // Handle different response types from your backend\n              if (parsed.type === 'end' && parsed.status === 'completed') {\n                onComplete?.();\n                return;\n              } else if (parsed.type === 'error') {\n                onError?.(new Error(parsed.error || 'Unknown error'));\n                return;\n              } else if (parsed.content) {\n                onChunk(parsed.content);\n              } else if (parsed.message) {\n                onChunk(parsed.message);\n              } else if (parsed.text) {\n                onChunk(parsed.text);\n              }\n            } catch (e) {\n              if (data.trim()) {\n                onChunk(data);\n              }\n            }\n          }\n        }\n        onComplete?.();\n        break;\n      }\n\n      partial += decoder.decode(value, { stream: true });\n      let lines = partial.split('\\n');\n      // Keep the last line in 'partial' in case it's incomplete\n      partial = lines.pop() || '';\n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6);\n          try {\n            const parsed = JSON.parse(data);\n\n            // Handle different response types from your backend\n            if (parsed.type === 'end' && parsed.status === 'completed') {\n              onComplete?.();\n              return;\n            } else if (parsed.type === 'error') {\n              onError?.(new Error(parsed.error || 'Unknown error'));\n              return;\n            } else if (parsed.content) {\n              onChunk(parsed.content);\n            } else if (parsed.message) {\n              onChunk(parsed.message);\n            } else if (parsed.text) {\n              onChunk(parsed.text);\n            }\n          } catch (e) {\n            if (data.trim()) {\n              onChunk(data);\n            }\n          }\n        }\n      }\n    }\n  } catch (error) {\n    onError?.(error as Error);\n  }\n}\n"]}