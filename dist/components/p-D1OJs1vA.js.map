{"file":"p-D1OJs1vA.js","mappings":"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","names":[],"sources":["src/utils/api-service.ts"],"sourcesContent":["export async function callAIStream(\n  message: string,\n  apiEndpoint: string,\n  conversationId: string,\n  onChunk: (chunk: string) => void,\n  onComplete?: () => void,\n  onError?: (error: Error) => void,\n): Promise<void> {\n  try {\n    const response = await fetch(`${apiEndpoint}/conversation/stream`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n      },\n      body: JSON.stringify({\n        prompt: message,\n        conversation_id: conversationId,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n\n    const reader = response.body?.getReader();\n    const decoder = new TextDecoder();\n    let partial = '';\n\n    if (!reader) {\n      throw new Error('Failed to get response reader');\n    }\n\n    while (true) {\n      const { done, value } = await reader.read();\n\n      if (done) {\n        partial += decoder.decode();\n\n        const lines = partial.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') {\n              onComplete?.();\n              return;\n            }\n            try {\n              const parsed = JSON.parse(data);\n              if (parsed.content) {\n                onChunk(parsed.content);\n              }\n            } catch (e) {\n              if (data.trim()) {\n                onChunk(data);\n              }\n            }\n          }\n        }\n        onComplete?.();\n        break;\n      }\n\n      partial += decoder.decode(value, { stream: true });\n      let lines = partial.split('\\n');\n      // Keep the last line in 'partial' in case it's incomplete\n      partial = lines.pop() || '';\n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6);\n          if (data === '[DONE]') {\n            onComplete?.();\n            return;\n          }\n          try {\n            const parsed = JSON.parse(data);\n            if (parsed.content) {\n              onChunk(parsed.content);\n            }\n          } catch (e) {\n            if (data.trim()) {\n              onChunk(data);\n            }\n          }\n        }\n      }\n    }\n  } catch (error) {\n    onError?.(error as Error);\n  }\n}\n"],"version":3}